{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nconst API_KEY = '1QSGX9GEK8V00WOA'; // Replace with your Alpha Vantage API key\n\nexport const useFinancialData = (symbol = 'IBM') => {\n  _s();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const response = await axios.get(`https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${symbol}&apikey=${API_KEY}`);\n        if (!response.data['Time Series (Daily)']) {\n          throw new Error('Invalid API response format');\n        }\n        const timeSeries = response.data['Time Series (Daily)'];\n        const formattedData = Object.entries(timeSeries).map(([date, values]) => ({\n          date,\n          open: parseFloat(values['1. open']),\n          high: parseFloat(values['2. high']),\n          low: parseFloat(values['3. low']),\n          close: parseFloat(values['4. close']),\n          volume: parseFloat(values['5. volume'])\n        }));\n        setData(formattedData.slice(0, 30)); // Limit to 30 days for better performance\n        setError(null);\n      } catch (err) {\n        setError(err.message || 'Failed to fetch data');\n        setData([]); // Set empty array instead of null\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [symbol]);\n  return {\n    data,\n    loading,\n    error\n  };\n};\n_s(useFinancialData, \"C4fiAW6C7RZgaKDoEXQgZpbuUZg=\");","map":{"version":3,"names":["useState","useEffect","axios","API_KEY","useFinancialData","symbol","_s","data","setData","loading","setLoading","error","setError","fetchData","response","get","Error","timeSeries","formattedData","Object","entries","map","date","values","open","parseFloat","high","low","close","volume","slice","err","message"],"sources":["C:/Users/DELL USER/fin-dash/src/hooks/useFinancialData.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst API_KEY = '1QSGX9GEK8V00WOA'; // Replace with your Alpha Vantage API key\r\n\r\nexport const useFinancialData = (symbol = 'IBM') => {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n  const fetchData = async () => {\r\n  try {\r\n    setLoading(true);\r\n    const response = await axios.get(\r\n      `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${symbol}&apikey=${API_KEY}`\r\n    );\r\n    \r\n    if (!response.data['Time Series (Daily)']) {\r\n      throw new Error('Invalid API response format');\r\n    }\r\n    \r\n    const timeSeries = response.data['Time Series (Daily)'];\r\n    const formattedData = Object.entries(timeSeries).map(([date, values]) => ({\r\n      date,\r\n      open: parseFloat(values['1. open']),\r\n      high: parseFloat(values['2. high']),\r\n      low: parseFloat(values['3. low']),\r\n      close: parseFloat(values['4. close']),\r\n      volume: parseFloat(values['5. volume']),\r\n    }));\r\n    \r\n    setData(formattedData.slice(0, 30)); // Limit to 30 days for better performance\r\n    setError(null);\r\n  } catch (err) {\r\n    setError(err.message || 'Failed to fetch data');\r\n    setData([]); // Set empty array instead of null\r\n  } finally {\r\n    setLoading(false);\r\n  }\r\n};\r\n\r\n    fetchData();\r\n  }, [symbol]);\r\n\r\n  return { data, loading, error };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,kBAAkB,CAAC,CAAC;;AAEpC,OAAO,MAAMC,gBAAgB,GAAGA,CAACC,MAAM,GAAG,KAAK,KAAK;EAAAC,EAAA;EAClD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IAChB,MAAMY,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACFH,UAAU,CAAC,IAAI,CAAC;QAChB,MAAMI,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAC9B,uEAAuEV,MAAM,WAAWF,OAAO,EACjG,CAAC;QAED,IAAI,CAACW,QAAQ,CAACP,IAAI,CAAC,qBAAqB,CAAC,EAAE;UACzC,MAAM,IAAIS,KAAK,CAAC,6BAA6B,CAAC;QAChD;QAEA,MAAMC,UAAU,GAAGH,QAAQ,CAACP,IAAI,CAAC,qBAAqB,CAAC;QACvD,MAAMW,aAAa,GAAGC,MAAM,CAACC,OAAO,CAACH,UAAU,CAAC,CAACI,GAAG,CAAC,CAAC,CAACC,IAAI,EAAEC,MAAM,CAAC,MAAM;UACxED,IAAI;UACJE,IAAI,EAAEC,UAAU,CAACF,MAAM,CAAC,SAAS,CAAC,CAAC;UACnCG,IAAI,EAAED,UAAU,CAACF,MAAM,CAAC,SAAS,CAAC,CAAC;UACnCI,GAAG,EAAEF,UAAU,CAACF,MAAM,CAAC,QAAQ,CAAC,CAAC;UACjCK,KAAK,EAAEH,UAAU,CAACF,MAAM,CAAC,UAAU,CAAC,CAAC;UACrCM,MAAM,EAAEJ,UAAU,CAACF,MAAM,CAAC,WAAW,CAAC;QACxC,CAAC,CAAC,CAAC;QAEHf,OAAO,CAACU,aAAa,CAACY,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;QACrClB,QAAQ,CAAC,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOmB,GAAG,EAAE;QACZnB,QAAQ,CAACmB,GAAG,CAACC,OAAO,IAAI,sBAAsB,CAAC;QAC/CxB,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;MACf,CAAC,SAAS;QACRE,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEGG,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACR,MAAM,CAAC,CAAC;EAEZ,OAAO;IAAEE,IAAI;IAAEE,OAAO;IAAEE;EAAM,CAAC;AACjC,CAAC;AAACL,EAAA,CAzCWF,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}