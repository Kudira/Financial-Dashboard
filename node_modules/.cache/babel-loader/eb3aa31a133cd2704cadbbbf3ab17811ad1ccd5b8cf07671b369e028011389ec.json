{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport yfinance from 'yfinance';\nexport const useFinancialData = (symbol = 'IBM') => {\n  _s();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const response = await axios.get(`https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${symbol}&apikey=${API_KEY}`);\n        if (!response.data['Time Series (Daily)']) {\n          throw new Error('Invalid API response format');\n        }\n        const timeSeries = response.data['Time Series (Daily)'];\n        const formattedData = Object.entries(timeSeries).map(([date, values]) => ({\n          date,\n          open: parseFloat(values['1. open']),\n          high: parseFloat(values['2. high']),\n          low: parseFloat(values['3. low']),\n          close: parseFloat(values['4. close']),\n          volume: parseFloat(values['5. volume'])\n        }));\n        setData(formattedData.slice(0, 30)); // Limit to 30 days for better performance\n        setError(null);\n      } catch (err) {\n        setError(err.message || 'Failed to fetch data');\n        setData([]); // Set empty array instead of null\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [symbol]);\n  return {\n    data,\n    loading,\n    error\n  };\n};\n\n// Format symbols for Yahoo Finance compatibility\n_s(useFinancialData, \"C4fiAW6C7RZgaKDoEXQgZpbuUZg=\");\nfunction formatSymbol(symbol) {\n  const symbolMap = {\n    'BTC': 'BTC-USD',\n    'ETH': 'ETH-USD',\n    'DOGE': 'DOGE-USD'\n  };\n  return symbolMap[symbol] || symbol;\n}\n\n// Generate realistic sample data\nfunction getSampleData(symbol) {\n  const baseValues = {\n    'AAPL': {\n      price: 180,\n      volatility: 5\n    },\n    'MSFT': {\n      price: 300,\n      volatility: 7\n    },\n    'IBM': {\n      price: 140,\n      volatility: 3\n    },\n    'BTC-USD': {\n      price: 50000,\n      volatility: 2000\n    },\n    'ETH-USD': {\n      price: 3000,\n      volatility: 150\n    },\n    'default': {\n      price: 100,\n      volatility: 2\n    }\n  };\n  const {\n    price,\n    volatility\n  } = baseValues[symbol] || baseValues.default;\n  return Array.from({\n    length: 30\n  }, (_, i) => {\n    const date = new Date();\n    date.setDate(date.getDate() - (29 - i));\n    const randomChange = (Math.random() - 0.5) * volatility;\n    const open = price + randomChange;\n    const close = open + (Math.random() - 0.3) * volatility;\n    return {\n      date: date.toISOString().split('T')[0],\n      open: parseFloat(open.toFixed(2)),\n      high: parseFloat((Math.max(open, close) + Math.random() * volatility).toFixed(2)),\n      low: parseFloat((Math.min(open, close) - Math.random() * volatility).toFixed(2)),\n      close: parseFloat(close.toFixed(2)),\n      volume: Math.floor(Math.random() * 5000000) + 1000000\n    };\n  });\n}","map":{"version":3,"names":["useState","useEffect","yfinance","useFinancialData","symbol","_s","data","setData","loading","setLoading","error","setError","fetchData","response","axios","get","API_KEY","Error","timeSeries","formattedData","Object","entries","map","date","values","open","parseFloat","high","low","close","volume","slice","err","message","formatSymbol","symbolMap","getSampleData","baseValues","price","volatility","default","Array","from","length","_","i","Date","setDate","getDate","randomChange","Math","random","toISOString","split","toFixed","max","min","floor"],"sources":["C:/Users/DELL USER/fin-dash/src/hooks/useFinancialData.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport yfinance from 'yfinance';\r\n\r\nexport const useFinancialData = (symbol = 'IBM') => {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n  const fetchData = async () => {\r\n  try {\r\n    setLoading(true);\r\n    const response = await axios.get(\r\n      `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${symbol}&apikey=${API_KEY}`\r\n    );\r\n    \r\n    if (!response.data['Time Series (Daily)']) {\r\n      throw new Error('Invalid API response format');\r\n    }\r\n    \r\n    const timeSeries = response.data['Time Series (Daily)'];\r\n    const formattedData = Object.entries(timeSeries).map(([date, values]) => ({\r\n      date,\r\n      open: parseFloat(values['1. open']),\r\n      high: parseFloat(values['2. high']),\r\n      low: parseFloat(values['3. low']),\r\n      close: parseFloat(values['4. close']),\r\n      volume: parseFloat(values['5. volume']),\r\n    }));\r\n    \r\n    setData(formattedData.slice(0, 30)); // Limit to 30 days for better performance\r\n    setError(null);\r\n  } catch (err) {\r\n    setError(err.message || 'Failed to fetch data');\r\n    setData([]); // Set empty array instead of null\r\n  } finally {\r\n    setLoading(false);\r\n  }\r\n};\r\n    fetchData();\r\n  }, [symbol]);\r\n\r\n  return { data, loading, error };\r\n};\r\n\r\n// Format symbols for Yahoo Finance compatibility\r\nfunction formatSymbol(symbol) {\r\n  const symbolMap = {\r\n    'BTC': 'BTC-USD',\r\n    'ETH': 'ETH-USD',\r\n    'DOGE': 'DOGE-USD'\r\n  };\r\n  return symbolMap[symbol] || symbol;\r\n}\r\n\r\n// Generate realistic sample data\r\nfunction getSampleData(symbol) {\r\n  const baseValues = {\r\n    'AAPL': { price: 180, volatility: 5 },\r\n    'MSFT': { price: 300, volatility: 7 },\r\n    'IBM': { price: 140, volatility: 3 },\r\n    'BTC-USD': { price: 50000, volatility: 2000 },\r\n    'ETH-USD': { price: 3000, volatility: 150 },\r\n    'default': { price: 100, volatility: 2 }\r\n  };\r\n\r\n  const { price, volatility } = baseValues[symbol] || baseValues.default;\r\n\r\n  return Array.from({ length: 30 }, (_, i) => {\r\n    const date = new Date();\r\n    date.setDate(date.getDate() - (29 - i));\r\n    const randomChange = (Math.random() - 0.5) * volatility;\r\n    const open = price + randomChange;\r\n    const close = open + (Math.random() - 0.3) * volatility;\r\n    \r\n    return {\r\n      date: date.toISOString().split('T')[0],\r\n      open: parseFloat(open.toFixed(2)),\r\n      high: parseFloat((Math.max(open, close) + Math.random() * volatility).toFixed(2)),\r\n      low: parseFloat((Math.min(open, close) - Math.random() * volatility).toFixed(2)),\r\n       close: parseFloat(close.toFixed(2)),\r\n      volume: Math.floor(Math.random() * 5000000) + 1000000\r\n    };\r\n  });\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}