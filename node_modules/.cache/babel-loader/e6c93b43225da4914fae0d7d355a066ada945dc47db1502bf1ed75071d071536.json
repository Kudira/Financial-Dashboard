{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nconst API_KEY = 'YOUR_ACTUAL_API_KEY'; // Replace this!\n\nexport const useFinancialData = (symbol = 'IBM') => {\n  _s();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const response = await axios.get(`https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${symbol}&apikey=${API_KEY}&outputsize=compact`);\n        if (response.data.Note) {\n          throw new Error('API rate limit exceeded');\n        }\n        if (!response.data['Time Series (Daily)']) {\n          throw new Error('Invalid API response format');\n        }\n        const timeSeries = response.data['Time Series (Daily)'];\n        const formattedData = Object.entries(timeSeries).slice(0, 30) // Get last 30 days\n        .map(([date, values]) => ({\n          date,\n          open: parseFloat(values['1. open']),\n          high: parseFloat(values['2. high']),\n          low: parseFloat(values['3. low']),\n          close: parseFloat(values['4. close']),\n          volume: parseFloat(values['5. volume'])\n        }));\n        setData(formattedData);\n        setError(null);\n      } catch (err) {\n        setError(err.message);\n        // Fallback sample data\n        setData([{\n          date: '2023-05-01',\n          open: 150.10,\n          high: 152.50,\n          low: 149.80,\n          close: 151.20,\n          volume: 1200000\n        }, {\n          date: '2023-04-28',\n          open: 149.50,\n          high: 150.80,\n          low: 148.20,\n          close: 150.10,\n          volume: 980000\n        }]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [symbol]);\n  return {\n    data,\n    loading,\n    error\n  };\n};\n_s(useFinancialData, \"C4fiAW6C7RZgaKDoEXQgZpbuUZg=\");","map":{"version":3,"names":["useState","useEffect","axios","API_KEY","useFinancialData","symbol","_s","data","setData","loading","setLoading","error","setError","fetchData","response","get","Note","Error","timeSeries","formattedData","Object","entries","slice","map","date","values","open","parseFloat","high","low","close","volume","err","message"],"sources":["C:/Users/DELL USER/fin-dash/src/hooks/useFinancialData.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst API_KEY = 'YOUR_ACTUAL_API_KEY'; // Replace this!\r\n\r\nexport const useFinancialData = (symbol = 'IBM') => {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const response = await axios.get(\r\n          `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${symbol}&apikey=${API_KEY}&outputsize=compact`\r\n        );\r\n        \r\n        if (response.data.Note) {\r\n          throw new Error('API rate limit exceeded');\r\n        }\r\n\r\n        if (!response.data['Time Series (Daily)']) {\r\n          throw new Error('Invalid API response format');\r\n        }\r\n\r\n        const timeSeries = response.data['Time Series (Daily)'];\r\n        const formattedData = Object.entries(timeSeries)\r\n          .slice(0, 30) // Get last 30 days\r\n          .map(([date, values]) => ({\r\n            date,\r\n            open: parseFloat(values['1. open']),\r\n            high: parseFloat(values['2. high']),\r\n            low: parseFloat(values['3. low']),\r\n            close: parseFloat(values['4. close']),\r\n            volume: parseFloat(values['5. volume']),\r\n          }));\r\n\r\n        setData(formattedData);\r\n        setError(null);\r\n      } catch (err) {\r\n        setError(err.message);\r\n        // Fallback sample data\r\n        setData([\r\n          {\r\n            date: '2023-05-01',\r\n            open: 150.10,\r\n            high: 152.50,\r\n            low: 149.80,\r\n            close: 151.20,\r\n            volume: 1200000\r\n          },\r\n          {\r\n            date: '2023-04-28',\r\n            open: 149.50,\r\n            high: 150.80,\r\n            low: 148.20,\r\n            close: 150.10,\r\n            volume: 980000\r\n          }\r\n        ]);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [symbol]);\r\n\r\n  return { data, loading, error };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,qBAAqB,CAAC,CAAC;;AAEvC,OAAO,MAAMC,gBAAgB,GAAGA,CAACC,MAAM,GAAG,KAAK,KAAK;EAAAC,EAAA;EAClD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMY,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACFH,UAAU,CAAC,IAAI,CAAC;QAChB,MAAMI,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAC9B,uEAAuEV,MAAM,WAAWF,OAAO,qBACjG,CAAC;QAED,IAAIW,QAAQ,CAACP,IAAI,CAACS,IAAI,EAAE;UACtB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;QAC5C;QAEA,IAAI,CAACH,QAAQ,CAACP,IAAI,CAAC,qBAAqB,CAAC,EAAE;UACzC,MAAM,IAAIU,KAAK,CAAC,6BAA6B,CAAC;QAChD;QAEA,MAAMC,UAAU,GAAGJ,QAAQ,CAACP,IAAI,CAAC,qBAAqB,CAAC;QACvD,MAAMY,aAAa,GAAGC,MAAM,CAACC,OAAO,CAACH,UAAU,CAAC,CAC7CI,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAAA,CACbC,GAAG,CAAC,CAAC,CAACC,IAAI,EAAEC,MAAM,CAAC,MAAM;UACxBD,IAAI;UACJE,IAAI,EAAEC,UAAU,CAACF,MAAM,CAAC,SAAS,CAAC,CAAC;UACnCG,IAAI,EAAED,UAAU,CAACF,MAAM,CAAC,SAAS,CAAC,CAAC;UACnCI,GAAG,EAAEF,UAAU,CAACF,MAAM,CAAC,QAAQ,CAAC,CAAC;UACjCK,KAAK,EAAEH,UAAU,CAACF,MAAM,CAAC,UAAU,CAAC,CAAC;UACrCM,MAAM,EAAEJ,UAAU,CAACF,MAAM,CAAC,WAAW,CAAC;QACxC,CAAC,CAAC,CAAC;QAELjB,OAAO,CAACW,aAAa,CAAC;QACtBP,QAAQ,CAAC,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOoB,GAAG,EAAE;QACZpB,QAAQ,CAACoB,GAAG,CAACC,OAAO,CAAC;QACrB;QACAzB,OAAO,CAAC,CACN;UACEgB,IAAI,EAAE,YAAY;UAClBE,IAAI,EAAE,MAAM;UACZE,IAAI,EAAE,MAAM;UACZC,GAAG,EAAE,MAAM;UACXC,KAAK,EAAE,MAAM;UACbC,MAAM,EAAE;QACV,CAAC,EACD;UACEP,IAAI,EAAE,YAAY;UAClBE,IAAI,EAAE,MAAM;UACZE,IAAI,EAAE,MAAM;UACZC,GAAG,EAAE,MAAM;UACXC,KAAK,EAAE,MAAM;UACbC,MAAM,EAAE;QACV,CAAC,CACF,CAAC;MACJ,CAAC,SAAS;QACRrB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACR,MAAM,CAAC,CAAC;EAEZ,OAAO;IAAEE,IAAI;IAAEE,OAAO;IAAEE;EAAM,CAAC;AACjC,CAAC;AAACL,EAAA,CAjEWF,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}