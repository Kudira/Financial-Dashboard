{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport const useFinancialData = (symbol = 'IBM') => {\n  _s();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Use demo API key for testing (replace with yours)\n        const API_KEY = '1QSGX9GEK8V00WOA';\n        const response = await fetch(`https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${symbol}&apikey=${API_KEY}`);\n        const result = await response.json();\n\n        // Debug: Log the API response\n        console.log('API Response:', result);\n        if (result['Error Message']) {\n          throw new Error(result['Error Message']);\n        }\n        const timeSeries = result['Time Series (Daily)'] || result['Weekly Time Series'];\n        if (!timeSeries) {\n          throw new Error('API returned unexpected format');\n        }\n        const formattedData = Object.entries(timeSeries).slice(0, 30).map(([date, values]) => ({\n          date,\n          open: parseFloat(values['1. open'] || values['1. open']),\n          high: parseFloat(values['2. high'] || values['2. high']),\n          low: parseFloat(values['3. low'] || values['3. low']),\n          close: parseFloat(values['4. close'] || values['4. close']),\n          volume: parseInt(values['5. volume'] || values['5. volume'])\n        }));\n        setData(formattedData);\n      } catch (err) {\n        setError(err.message);\n        console.error('API Error:', err);\n        setData(getSampleData(symbol));\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [symbol]);\n  return {\n    data,\n    loading,\n    error\n  };\n};\n\n// ... keep existing getSampleData() function ...\n// Realistic sample data generator\n_s(useFinancialData, \"C4fiAW6C7RZgaKDoEXQgZpbuUZg=\");\nfunction getSampleData(symbol) {\n  const baseValues = {\n    'AAPL': {\n      price: 180,\n      volatility: 5\n    },\n    'MSFT': {\n      price: 300,\n      volatility: 7\n    },\n    'IBM': {\n      price: 140,\n      volatility: 3\n    },\n    'BTC': {\n      price: 50000,\n      volatility: 2000\n    },\n    'default': {\n      price: 100,\n      volatility: 2\n    }\n  };\n  const {\n    price,\n    volatility\n  } = baseValues[symbol] || baseValues.default;\n  return Array.from({\n    length: 30\n  }, (_, i) => {\n    const date = new Date();\n    date.setDate(date.getDate() - (29 - i));\n    const randomChange = (Math.random() - 0.5) * volatility;\n    const open = price + randomChange;\n    const close = open + (Math.random() - 0.5) * volatility;\n    return {\n      date: date.toISOString().split('T')[0],\n      open: parseFloat(open.toFixed(2)),\n      high: parseFloat((Math.max(open, close) + Math.random() * volatility / 3).toFixed(2)),\n      low: parseFloat((Math.min(open, close) - Math.random() * volatility / 3).toFixed(2)),\n      close: parseFloat(close.toFixed(2)),\n      volume: Math.floor(Math.random() * 5000000) + 1000000\n    };\n  });\n}","map":{"version":3,"names":["useState","useEffect","useFinancialData","symbol","_s","data","setData","loading","setLoading","error","setError","fetchData","API_KEY","response","fetch","result","json","console","log","Error","timeSeries","formattedData","Object","entries","slice","map","date","values","open","parseFloat","high","low","close","volume","parseInt","err","message","getSampleData","baseValues","price","volatility","default","Array","from","length","_","i","Date","setDate","getDate","randomChange","Math","random","toISOString","split","toFixed","max","min","floor"],"sources":["C:/Users/DELL USER/fin-dash/src/hooks/useFinancialData.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nexport const useFinancialData = (symbol = 'IBM') => {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n        \r\n        // Use demo API key for testing (replace with yours)\r\n        const API_KEY = '1QSGX9GEK8V00WOA'; \r\n        const response = await fetch(\r\n          `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${symbol}&apikey=${API_KEY}`\r\n        );\r\n        \r\n        const result = await response.json();\r\n        \r\n        // Debug: Log the API response\r\n        console.log('API Response:', result);\r\n\r\n        if (result['Error Message']) {\r\n          throw new Error(result['Error Message']);\r\n        }\r\n\r\n        const timeSeries = result['Time Series (Daily)'] || result['Weekly Time Series'];\r\n        if (!timeSeries) {\r\n          throw new Error('API returned unexpected format');\r\n        }\r\n\r\n        const formattedData = Object.entries(timeSeries)\r\n          .slice(0, 30)\r\n          .map(([date, values]) => ({\r\n            date,\r\n            open: parseFloat(values['1. open'] || values['1. open']),\r\n            high: parseFloat(values['2. high'] || values['2. high']),\r\n            low: parseFloat(values['3. low'] || values['3. low']),\r\n            close: parseFloat(values['4. close'] || values['4. close']),\r\n            volume: parseInt(values['5. volume'] || values['5. volume'])\r\n          }));\r\n\r\n        setData(formattedData);\r\n      } catch (err) {\r\n        setError(err.message);\r\n        console.error('API Error:', err);\r\n        setData(getSampleData(symbol));\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [symbol]);\r\n\r\n  return { data, loading, error };\r\n};\r\n\r\n// ... keep existing getSampleData() function ...\r\n// Realistic sample data generator\r\nfunction getSampleData(symbol) {\r\n  const baseValues = {\r\n    'AAPL': { price: 180, volatility: 5 },\r\n    'MSFT': { price: 300, volatility: 7 },\r\n    'IBM': { price: 140, volatility: 3 },\r\n    'BTC': { price: 50000, volatility: 2000 },\r\n    'default': { price: 100, volatility: 2 }\r\n  };\r\n\r\n  const { price, volatility } = baseValues[symbol] || baseValues.default;\r\n\r\n  return Array.from({ length: 30 }, (_, i) => {\r\n    const date = new Date();\r\n    date.setDate(date.getDate() - (29 - i));\r\n    \r\n    const randomChange = (Math.random() - 0.5) * volatility;\r\n    const open = price + randomChange;\r\n    const close = open + (Math.random() - 0.5) * volatility;\r\n\r\n    return {\r\n      date: date.toISOString().split('T')[0],\r\n      open: parseFloat(open.toFixed(2)),\r\n      high: parseFloat((Math.max(open, close) + Math.random() * volatility/3).toFixed(2)),\r\n      low: parseFloat((Math.min(open, close) - Math.random() * volatility/3).toFixed(2)),\r\n      close: parseFloat(close.toFixed(2)),\r\n      volume: Math.floor(Math.random() * 5000000) + 1000000\r\n    };\r\n  });\r\n}"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAO,MAAMC,gBAAgB,GAAGA,CAACC,MAAM,GAAG,KAAK,KAAK;EAAAC,EAAA;EAClD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMU,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACFH,UAAU,CAAC,IAAI,CAAC;QAChBE,QAAQ,CAAC,IAAI,CAAC;;QAEd;QACA,MAAME,OAAO,GAAG,kBAAkB;QAClC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,uEAAuEX,MAAM,WAAWS,OAAO,EACjG,CAAC;QAED,MAAMG,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;QAEpC;QACAC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEH,MAAM,CAAC;QAEpC,IAAIA,MAAM,CAAC,eAAe,CAAC,EAAE;UAC3B,MAAM,IAAII,KAAK,CAACJ,MAAM,CAAC,eAAe,CAAC,CAAC;QAC1C;QAEA,MAAMK,UAAU,GAAGL,MAAM,CAAC,qBAAqB,CAAC,IAAIA,MAAM,CAAC,oBAAoB,CAAC;QAChF,IAAI,CAACK,UAAU,EAAE;UACf,MAAM,IAAID,KAAK,CAAC,gCAAgC,CAAC;QACnD;QAEA,MAAME,aAAa,GAAGC,MAAM,CAACC,OAAO,CAACH,UAAU,CAAC,CAC7CI,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CACZC,GAAG,CAAC,CAAC,CAACC,IAAI,EAAEC,MAAM,CAAC,MAAM;UACxBD,IAAI;UACJE,IAAI,EAAEC,UAAU,CAACF,MAAM,CAAC,SAAS,CAAC,IAAIA,MAAM,CAAC,SAAS,CAAC,CAAC;UACxDG,IAAI,EAAED,UAAU,CAACF,MAAM,CAAC,SAAS,CAAC,IAAIA,MAAM,CAAC,SAAS,CAAC,CAAC;UACxDI,GAAG,EAAEF,UAAU,CAACF,MAAM,CAAC,QAAQ,CAAC,IAAIA,MAAM,CAAC,QAAQ,CAAC,CAAC;UACrDK,KAAK,EAAEH,UAAU,CAACF,MAAM,CAAC,UAAU,CAAC,IAAIA,MAAM,CAAC,UAAU,CAAC,CAAC;UAC3DM,MAAM,EAAEC,QAAQ,CAACP,MAAM,CAAC,WAAW,CAAC,IAAIA,MAAM,CAAC,WAAW,CAAC;QAC7D,CAAC,CAAC,CAAC;QAELrB,OAAO,CAACe,aAAa,CAAC;MACxB,CAAC,CAAC,OAAOc,GAAG,EAAE;QACZzB,QAAQ,CAACyB,GAAG,CAACC,OAAO,CAAC;QACrBnB,OAAO,CAACR,KAAK,CAAC,YAAY,EAAE0B,GAAG,CAAC;QAChC7B,OAAO,CAAC+B,aAAa,CAAClC,MAAM,CAAC,CAAC;MAChC,CAAC,SAAS;QACRK,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACR,MAAM,CAAC,CAAC;EAEZ,OAAO;IAAEE,IAAI;IAAEE,OAAO;IAAEE;EAAM,CAAC;AACjC,CAAC;;AAED;AACA;AAAAL,EAAA,CA3DaF,gBAAgB;AA4D7B,SAASmC,aAAaA,CAAClC,MAAM,EAAE;EAC7B,MAAMmC,UAAU,GAAG;IACjB,MAAM,EAAE;MAAEC,KAAK,EAAE,GAAG;MAAEC,UAAU,EAAE;IAAE,CAAC;IACrC,MAAM,EAAE;MAAED,KAAK,EAAE,GAAG;MAAEC,UAAU,EAAE;IAAE,CAAC;IACrC,KAAK,EAAE;MAAED,KAAK,EAAE,GAAG;MAAEC,UAAU,EAAE;IAAE,CAAC;IACpC,KAAK,EAAE;MAAED,KAAK,EAAE,KAAK;MAAEC,UAAU,EAAE;IAAK,CAAC;IACzC,SAAS,EAAE;MAAED,KAAK,EAAE,GAAG;MAAEC,UAAU,EAAE;IAAE;EACzC,CAAC;EAED,MAAM;IAAED,KAAK;IAAEC;EAAW,CAAC,GAAGF,UAAU,CAACnC,MAAM,CAAC,IAAImC,UAAU,CAACG,OAAO;EAEtE,OAAOC,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAE;EAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAK;IAC1C,MAAMpB,IAAI,GAAG,IAAIqB,IAAI,CAAC,CAAC;IACvBrB,IAAI,CAACsB,OAAO,CAACtB,IAAI,CAACuB,OAAO,CAAC,CAAC,IAAI,EAAE,GAAGH,CAAC,CAAC,CAAC;IAEvC,MAAMI,YAAY,GAAG,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,IAAIZ,UAAU;IACvD,MAAMZ,IAAI,GAAGW,KAAK,GAAGW,YAAY;IACjC,MAAMlB,KAAK,GAAGJ,IAAI,GAAG,CAACuB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,IAAIZ,UAAU;IAEvD,OAAO;MACLd,IAAI,EAAEA,IAAI,CAAC2B,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACtC1B,IAAI,EAAEC,UAAU,CAACD,IAAI,CAAC2B,OAAO,CAAC,CAAC,CAAC,CAAC;MACjCzB,IAAI,EAAED,UAAU,CAAC,CAACsB,IAAI,CAACK,GAAG,CAAC5B,IAAI,EAAEI,KAAK,CAAC,GAAGmB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGZ,UAAU,GAAC,CAAC,EAAEe,OAAO,CAAC,CAAC,CAAC,CAAC;MACnFxB,GAAG,EAAEF,UAAU,CAAC,CAACsB,IAAI,CAACM,GAAG,CAAC7B,IAAI,EAAEI,KAAK,CAAC,GAAGmB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGZ,UAAU,GAAC,CAAC,EAAEe,OAAO,CAAC,CAAC,CAAC,CAAC;MAClFvB,KAAK,EAAEH,UAAU,CAACG,KAAK,CAACuB,OAAO,CAAC,CAAC,CAAC,CAAC;MACnCtB,MAAM,EAAEkB,IAAI,CAACO,KAAK,CAACP,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG;IAChD,CAAC;EACH,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}