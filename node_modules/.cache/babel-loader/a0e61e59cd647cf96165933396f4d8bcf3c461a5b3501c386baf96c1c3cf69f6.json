{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport const useFinancialData = (symbol = 'IBM') => {\n  _s();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        setData([]); // Clear previous data\n\n        const API_KEY = 'YOUR_API_KEY'; // Replace with your key\n        const response = await fetch(`https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${symbol}&apikey=${API_KEY}`);\n        if (!response.ok) throw new Error('Network response failed');\n        const result = await response.json();\n\n        // Check for explicit API errors\n        if (result['Error Message']) {\n          throw new Error(`Invalid stock symbol: ${symbol}`);\n        }\n\n        // Check for rate limit message\n        if (result.Note && result.Note.includes('API call frequency')) {\n          throw new Error('API rate limit reached - try again later');\n        }\n        const timeSeries = result['Time Series (Daily)'];\n        if (!timeSeries || Object.keys(timeSeries).length === 0) {\n          throw new Error(`No data available for ${symbol}`);\n        }\n        const formattedData = Object.entries(timeSeries).slice(0, 30).map(([date, values]) => ({\n          date,\n          open: parseFloat(values['1. open']),\n          high: parseFloat(values['2. high']),\n          low: parseFloat(values['3. low']),\n          close: parseFloat(values['4. close']),\n          volume: parseInt(values['5. volume'])\n        }));\n        setData(formattedData);\n      } catch (err) {\n        setError(err.message);\n        setData([]); // Ensure no fake data is shown\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [symbol]);\n  return {\n    data,\n    loading,\n    error\n  };\n};\n_s(useFinancialData, \"C4fiAW6C7RZgaKDoEXQgZpbuUZg=\");","map":{"version":3,"names":["useState","useEffect","useFinancialData","symbol","_s","data","setData","loading","setLoading","error","setError","fetchData","API_KEY","response","fetch","ok","Error","result","json","Note","includes","timeSeries","Object","keys","length","formattedData","entries","slice","map","date","values","open","parseFloat","high","low","close","volume","parseInt","err","message"],"sources":["C:/Users/DELL USER/fin-dash/src/hooks/useFinancialData.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nexport const useFinancialData = (symbol = 'IBM') => {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n        setData([]); // Clear previous data\r\n        \r\n        const API_KEY = 'YOUR_API_KEY'; // Replace with your key\r\n        const response = await fetch(\r\n          `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${symbol}&apikey=${API_KEY}`\r\n        );\r\n        \r\n        if (!response.ok) throw new Error('Network response failed');\r\n        \r\n        const result = await response.json();\r\n        \r\n        // Check for explicit API errors\r\n        if (result['Error Message']) {\r\n          throw new Error(`Invalid stock symbol: ${symbol}`);\r\n        }\r\n        \r\n        // Check for rate limit message\r\n        if (result.Note && result.Note.includes('API call frequency')) {\r\n          throw new Error('API rate limit reached - try again later');\r\n        }\r\n\r\n        const timeSeries = result['Time Series (Daily)'];\r\n        if (!timeSeries || Object.keys(timeSeries).length === 0) {\r\n          throw new Error(`No data available for ${symbol}`);\r\n        }\r\n\r\n        const formattedData = Object.entries(timeSeries)\r\n          .slice(0, 30)\r\n          .map(([date, values]) => ({\r\n            date,\r\n            open: parseFloat(values['1. open']),\r\n            high: parseFloat(values['2. high']),\r\n            low: parseFloat(values['3. low']),\r\n            close: parseFloat(values['4. close']),\r\n            volume: parseInt(values['5. volume'])\r\n          }));\r\n\r\n        setData(formattedData);\r\n      } catch (err) {\r\n        setError(err.message);\r\n        setData([]); // Ensure no fake data is shown\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [symbol]);\r\n\r\n  return { data, loading, error };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAO,MAAMC,gBAAgB,GAAGA,CAACC,MAAM,GAAG,KAAK,KAAK;EAAAC,EAAA;EAClD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMU,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACFH,UAAU,CAAC,IAAI,CAAC;QAChBE,QAAQ,CAAC,IAAI,CAAC;QACdJ,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;;QAEb,MAAMM,OAAO,GAAG,cAAc,CAAC,CAAC;QAChC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,uEAAuEX,MAAM,WAAWS,OAAO,EACjG,CAAC;QAED,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;QAE5D,MAAMC,MAAM,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;;QAEpC;QACA,IAAID,MAAM,CAAC,eAAe,CAAC,EAAE;UAC3B,MAAM,IAAID,KAAK,CAAC,yBAAyBb,MAAM,EAAE,CAAC;QACpD;;QAEA;QACA,IAAIc,MAAM,CAACE,IAAI,IAAIF,MAAM,CAACE,IAAI,CAACC,QAAQ,CAAC,oBAAoB,CAAC,EAAE;UAC7D,MAAM,IAAIJ,KAAK,CAAC,0CAA0C,CAAC;QAC7D;QAEA,MAAMK,UAAU,GAAGJ,MAAM,CAAC,qBAAqB,CAAC;QAChD,IAAI,CAACI,UAAU,IAAIC,MAAM,CAACC,IAAI,CAACF,UAAU,CAAC,CAACG,MAAM,KAAK,CAAC,EAAE;UACvD,MAAM,IAAIR,KAAK,CAAC,yBAAyBb,MAAM,EAAE,CAAC;QACpD;QAEA,MAAMsB,aAAa,GAAGH,MAAM,CAACI,OAAO,CAACL,UAAU,CAAC,CAC7CM,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CACZC,GAAG,CAAC,CAAC,CAACC,IAAI,EAAEC,MAAM,CAAC,MAAM;UACxBD,IAAI;UACJE,IAAI,EAAEC,UAAU,CAACF,MAAM,CAAC,SAAS,CAAC,CAAC;UACnCG,IAAI,EAAED,UAAU,CAACF,MAAM,CAAC,SAAS,CAAC,CAAC;UACnCI,GAAG,EAAEF,UAAU,CAACF,MAAM,CAAC,QAAQ,CAAC,CAAC;UACjCK,KAAK,EAAEH,UAAU,CAACF,MAAM,CAAC,UAAU,CAAC,CAAC;UACrCM,MAAM,EAAEC,QAAQ,CAACP,MAAM,CAAC,WAAW,CAAC;QACtC,CAAC,CAAC,CAAC;QAELxB,OAAO,CAACmB,aAAa,CAAC;MACxB,CAAC,CAAC,OAAOa,GAAG,EAAE;QACZ5B,QAAQ,CAAC4B,GAAG,CAACC,OAAO,CAAC;QACrBjC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;MACf,CAAC,SAAS;QACRE,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACR,MAAM,CAAC,CAAC;EAEZ,OAAO;IAAEE,IAAI;IAAEE,OAAO;IAAEE;EAAM,CAAC;AACjC,CAAC;AAACL,EAAA,CA5DWF,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}